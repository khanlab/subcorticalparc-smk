
import snakebids
from snakebids import bids 

import pandas as pd

from os.path import join
from functools import partial
from pathlib import Path

configfile: "config/config.yml"

inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
    use_bids_inputs=True,
)


# Load participants.tsv and strip off 'sub-'
# df = pd.read_table(config["participants_tsv"])
# subjects = df["participant_id"].str.strip("sub-").to_list()

# Get list of ROIs
df_targets = pd.read_table(
    str(
        Path(workflow.basedir).parent 
        / Path(config["target"]["cortical"]["tsv"])
    )
)
targets = df_targets.name.to_list()

# Get seeds, as structure keys
seeds = config["seed"]["structures"].keys()

# Hemis
hemis = ["L", "R"]


# bids-naming for subject and template (only alphanumeric characters)
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),
    template="[a-zA-Z0-9]+",
    seed="[a-zA-Z0-9]+",
    k="[0-9]+",


template = config["template"]

tractmap_dir = str(Path(config["output_dir"]) / "tractmap")

include: "rules/common.smk"
include: "rules/hcp_mmp.smk"
include: "rules/diffparc.smk"
include: "rules/tractmap.smk"
include: "rules/funcparc.smk"

# Structural + Functional
rule all:
    input:
        # group_tractseg=expand(
        #     bids(
        #         root="results/tractmap",
        #         template="{template}",
        #         hemi="{hemi}",
        #         label="{seed}",
        #         method="spectralcosine",
        #         k="{k}",
        #         desc="avgtractmap",
        #         suffix="dseg.nii.gz",
        #     ),
        #     template=config["template"],
        #     seed=seeds,
        #     hemi=hemis,
        #     k=range(2, config["max_k"] + 1),
        # ),
        # Input below would result in same as --omit-from resample_clus_seed
        cluster_k=expand(
            bids(
                root=tractmap_dir,
                subject="{subject}",
                space="individual",
                hemi="{hemi}",
                label="{seed}",
                method="spectralcosine",
                k="{k}",
                from_="{template}",
                desc="sorted",
                suffix="dseg.nii.gz",
            ),
            subject=inputs["T1w"].input_lists["subject"],
            template=template,
            seed=seeds,
            hemi=hemis,
            k=range(2, config["max_k"] + 1),
        ),
        atlas=expand(
            rules.func_clustering.output.niftis,
            seed=seeds, 
            vox_res=config['hcp_func']['voxel_size'],
        ),
        cluster=expand(
            rules.func_clustering.output.labels,
            seed=seeds, 
            vox_res=config['hcp_func']['voxel_size'],
        )

# Structural only
rule diffparc:
    input:
        # group_tractseg=expand(
        #     bids(
        #         root="results/tractmap",
        #         template="{template}",
        #         hemi="{hemi}",
        #         label="{seed}",
        #         method="spectralcosine",
        #         k="{k}",
        #         desc="avgtractmap",
        #         suffix="dseg.nii.gz",
        #     ),
        #     template=config["template"],
        #     seed=seeds,
        #     hemi=hemis,
        #     k=range(2, config["max_k"] + 1),
        # ),
        # Input below would result in same as --omit-from resample_clus_seed
        cluster_k=expand(
            bids(
                root=tractmap_dir,
                subject="{subject}",
                space="individual",
                hemi="{hemi}",
                label="{seed}",
                method="spectralcosine",
                k="{k}",
                from_="{template}",
                desc="sorted",
                suffix="dseg.nii.gz",
            ),
            subject=inputs["T1w"].input_lists["subject"],
            template=template,
            seed=seeds,
            hemi=hemis,
            k=range(2, config["max_k"] + 1),
        ),


# Functional only
rule funcparc:
    input: 
        atlas=expand(
            rules.func_clustering.output.niftis,
            seed=seeds, 
            vox_res=config['hcp_func']['voxel_size'],
        ),
        cluster=expand(
            rules.func_clustering.output.labels,
            seed=seeds, 
            vox_res=config['hcp_func']['voxel_size'],
        )
